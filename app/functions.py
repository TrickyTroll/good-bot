# This file contains functions used by other scripts
import shlex
import time
import stat
import sys
import os
import subprocess

# ----------------------------------------------------------------------- #
#                    Finding the instructions
# ----------------------------------------------------------------------- #

def instruction_finder():
    '''
    This function searches for funtions to be executed inside
    of the container.
    The video's script name must be 'script.md'.
    Returns: A list of functions to be executed.
    Function's structure:
    {command: , media_format: , file_name: }
    '''
    todo = []
    with open('script/script.md') as f:
        datafile = [line for line in f.readlines() if line.strip()]

        # Here the program should also skip the header.
        for line in datafile:
            index = datafile.index(line)
            if '---' in line and '(instructions:' in datafile[index+1]:
                to_add = {
                        "command": datafile[index+2].rstrip().lstrip(),
                        "media_format": datafile[index+3].rstrip().lstrip(),
                        "file_name": datafile[index+4].rstrip().lstrip()
                        }
                todo.append(to_add)

            elif '---' in line and '(instructions:' not in datafile[index+1]:

                print("Line %s has no instructions")%(datafile[index+1])
                
                break

    return todo


# ----------------------------------------------------------------------- #
#                             Recording
# ----------------------------------------------------------------------- #


def start_rec(to_record):
    '''
    Creates a new directory and saves the video inside of the 
    directory.
    Records to_record using asciinema.
    to_record: shoud be a shell script created by script_maker.
    Returns: 'Sould be recording...'
    '''

    # Creating the new directory

    parent = os.getcwd()
    newpath = parent + "/recordings"
    
    if not os.path.exists(newpath):
        os.makedirs(newpath)

    # Defines the title of the video to the shell script's name
    # and the path to the new directory.
    
    title = newpath + '/' + to_record.replace('.sh', '')

    # Starting asciinema

    subprocess.Popen([
        'asciinema',
        'rec',
        '-c',
        './app/shell_scripts/' + to_record,
        title
        ])
    return 'Should be recording...'
    


# ----------------------------------------------------------------------- #
#                         Instrucion executer
# ----------------------------------------------------------------------- #

def run_command(instructions):
    '''
    Input: some text to type in the
    terminal. Must be of type string
    Returns: The string 'Done!'.
    '''
    command = instructions["command"]

    start_rec(instructions)

    os.system('clear')
    time.sleep(.5)

    subprocess.Popen(shlex.split(command)) 

    stop_rec()

    return 'Done!'



def instruction_executer(container_name, instructions_list):
    '''
    Writes functions in a terminal using 
    pyautogui.

    Input: A list of instructions to execute.
    The format of each instruction is a dict
    containing: the command, the media format 
    and the file name.

    Returns: A string saying 'Done!'.
    '''
    for i in instructions_list:
        if i["media_format"] == 'gif':
            run_command(i)

    return 'Done!'
        

# ----------------------------------------------------------------------- #
#                       Bash scripts creation
# ----------------------------------------------------------------------- #

def script_maker(instructions_list):
    '''
    Creates a bash script that uses demo-magic for every instruction in the
    list.
    Input: List of instructions that is generated by instruction_finder()
    Returns: 'Done!'
    '''
    # Making a new directory for the scripts.

    parent = os.getcwd()
    newpath = parent + "/shell_scripts"
    
    if not os.path.exists(newpath):
        os.makedirs(newpath)

    # Changing to the new working directory.

    os.chdir(newpath)

    # Creating the scripts.
    
    for i in instructions_list:
        identification = '%s.sh'%(i['file_name'])
        with open (identification, 'w') as shscr:
            shscr.write('''\
#!/usr/bin/env bash

# including demo-magic

. ../demo-magic.sh

# speed (defined by the user)

TYPE_SPEED=%s
                    
# This should also be defined by the user...maybe later.

DEMO_PROMPT="${GREEN}âžœ ${CYAN}\W "

# Clearing the prompt

clear

# The commands go here

pe "%s"

# The end (shows a prompt at the end)

p ""
'''%(10, i['command']))#Commands should be a list at some point
            
            # Making sure that the files are executable

        os.chmod(identification, stat.S_IRWXU)



    return 'Done!'
